import json
import sys
from collections import defaultdict
import argparse
from datetime import datetime
import os

def generate_pipeline_code(pipeline_json):
    """
    Generate Python code for a VIS pipeline from JSON configuration.
    
    Args:
        pipeline_json (str or list): JSON string or parsed list representing the pipeline configuration
    
    Returns:
        str: Generated Python code
    """
    # Parse JSON if it's a string
    if isinstance(pipeline_json, str):
        pipeline = json.loads(pipeline_json)
    else:
        pipeline = pipeline_json
    
    # Group modules by level
    modules_by_level = defaultdict(list)
    all_modules = []
    
    for module_config in pipeline:
        level = module_config.get("level", 0)
        modules_by_level[level].append(module_config)
        all_modules.append(module_config["module"])
    
    # Generate code
    code = [
        "# Generated by VIS Pipeline Generator",
        f"# Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
        "",
        "from sil_sdk.modules.vis import VISModule",
        "",
        "# Initialize the VIS module with WebSocket connection",
        "vis = VISModule(\"ws://<server-ip>:8765\")",
        "",
        "# Load all modules",
        f"modules = {all_modules}",
        "vis.load(modules)",
        ""
    ]
    
    # Dictionary to track results from each module
    results_vars = {}
    
    # Process each level
    for level in sorted(modules_by_level.keys()):
        code.append(f"# Level {level}")
        
        for module_config in modules_by_level[level]:
            module_name = module_config["module"]
            mode = module_config.get("mode", "live")
            input_from = module_config.get("input_from", None)
            input_type = module_config.get("input_type", None)
            prompt = module_config.get("prompt", None)
            
            # Generate run statement
            run_params = []
            
            # Handle different types of inputs
            if input_from and input_type:
                if input_from == "camera" and input_type == "camera":
                    run_params.append("input_source=\"camera\"")
                elif input_from in results_vars:
                    # Get data from previous module
                    input_var = f"{input_from.lower()}_result.get(\"{input_type}\")"
                    var_name = input_type.lower()
                    code.append(f"{var_name} = {input_var}")
                    run_params.append(f"{var_name}={var_name}")
            
            # Add prompt if provided
            if prompt:
                run_params.append(f"prompt=\"{prompt}\"")
                
            # Generate the run statement
            params_str = ", ".join(run_params)
            code.append(f"vis.run(\"{module_name}\", {params_str})")
            result_var = f"{module_name.lower()}_result"
            code.append(f"{result_var} = vis.get_result(\"{module_name}\")")
            results_vars[module_name] = result_var
            code.append("")
        
    # Add comments for example usage
    code.append("# Now you can use the results from all modules")
    code.append("# For example:")
    
    for module_config in pipeline:
        module_name = module_config["module"].lower()
        if "gdino" in module_name.lower():
            code.append(f"# bboxes = {module_name}_result.get(\"BBOX\")")
        elif "grasp" in module_name.lower():
            code.append(f"# grasp_poses = {module_name}_result.get(\"grasp_poses\")")
        elif "llava" in module_name.lower():
            code.append(f"# description = {module_name}_result.get(\"text\")")
        elif "pose" in module_name.lower():
            code.append(f"# pose = {module_name}_result.get(\"pose\")")
        else:
            code.append(f"# result = {module_name}_result.get(\"output\")")
    
    return "\n".join(code)

def main():
    parser = argparse.ArgumentParser(description='Generate Python code from VIS pipeline JSON')
    parser.add_argument('input_file', help='Input JSON file path')
    parser.add_argument('-o', '--output', help='Output Python file path (default: stdout)')
    args = parser.parse_args()
    
    try:
        with open(args.input_file, 'r') as f:
            pipeline_json = json.load(f)
        
        code = generate_pipeline_code(pipeline_json)
        
        if args.output:
            with open(args.output, 'w') as f:
                f.write(code)
            print(f"Code generated and saved to {args.output}")
        else:
            print(code)
    
    except Exception as e:
        print(f"Error: {str(e)}", file=sys.stderr)
        sys.exit(1)

if __name__ == "__main__":
    main()